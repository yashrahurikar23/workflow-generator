# Pydantic schemas for workflow generation
from enum import Enum
from typing import Any, Dict, List, Literal, Optional

from pydantic import BaseModel, Field


class NodeType(str, Enum):
    """Supported workflow node types"""
    WEB_SCRAPER = "web_scraper"
    EMAIL_TRIGGER = "email_trigger"
    AI_PROCESSOR = "ai_processor"
    DATA_TRANSFORMER = "data_transformer"
    NOTIFICATION = "notification"
    CONDITION = "condition"
    HTTP_REQUEST = "http_request"
    FILE_STORAGE = "file_storage"
    DATABASE_OPERATION = "database_operation"

class NodePosition(BaseModel):
    """Position of a node in the visual workflow"""
    x: float = Field(..., description="X coordinate")
    y: float = Field(..., description="Y coordinate")

class WorkflowNodeSchema(BaseModel):
    """Schema for a single workflow node"""
    node_id: str = Field(..., description="Unique identifier for the node")
    node_type: NodeType = Field(..., description="Type of the node")
    name: str = Field(..., description="Human-readable name for the node")
    description: str = Field(..., description="Description of what this node does")
    position: NodePosition = Field(..., description="Position in the visual workflow")
    config: Dict[str, Any] = Field(default_factory=dict, description="Node-specific configuration")
    
    # Input/Output definitions
    inputs: List[str] = Field(default_factory=list, description="Expected input parameters")
    outputs: List[str] = Field(default_factory=list, description="Output parameters this node produces")

class WorkflowConnectionSchema(BaseModel):
    """Schema for connections between nodes"""
    connection_id: str = Field(..., description="Unique identifier for the connection")
    source_node_id: str = Field(..., description="ID of the source node")
    target_node_id: str = Field(..., description="ID of the target node")
    source_output: str = Field(..., description="Output parameter from source node")
    target_input: str = Field(..., description="Input parameter for target node")
    
class WorkflowPlan(BaseModel):
    """Complete workflow plan generated by the planner agent"""
    workflow_name: str = Field(..., description="Name of the workflow")
    workflow_description: str = Field(..., description="Description of what the workflow does")
    nodes: List[WorkflowNodeSchema] = Field(..., description="List of nodes in the workflow")
    connections: List[WorkflowConnectionSchema] = Field(..., description="List of connections between nodes")
    execution_order: List[str] = Field(..., description="Ordered list of node IDs for execution")
    estimated_execution_time: Optional[int] = Field(None, description="Estimated execution time in seconds")

class WebScrapingWorkflowRequest(BaseModel):
    """Specific request for web scraping workflow"""
    target_url: str = Field(..., description="URL to scrape")
    data_to_extract: List[str] = Field(..., description="Types of data to extract (e.g., 'title', 'content', 'links')")
    output_format: Literal["json", "csv", "text"] = Field(default="json", description="Desired output format")
    notification_email: Optional[str] = Field(None, description="Email to notify when scraping is complete")
    schedule: Optional[str] = Field(None, description="Cron expression for scheduling (optional)")

class AgentResponse(BaseModel):
    """Standard response from any agent"""
    success: bool = Field(..., description="Whether the operation was successful")
    message: str = Field(..., description="Human-readable message")
    data: Any = Field(None, description="Agent-specific response data")
    confidence: float = Field(default=1.0, description="Confidence score (0.0 to 1.0)")
    reasoning: str = Field(..., description="Explanation of the agent's reasoning")
